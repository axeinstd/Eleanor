//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Diagnostics.CodeAnalysis;


namespace Eleanor
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        private global::Eleanor.Eleanor_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Eleanor.Eleanor_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace Eleanor.Eleanor_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Eleanor.Eleanor_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::Eleanor.Eleanor_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::Eleanor.Eleanor_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;
        
        private void InitTypeTables()
        {
            _typeNameTable = new string[36];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "Microsoft.UI.Xaml.Media.DesktopAcrylicBackdrop";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Media.SystemBackdrop";
            _typeNameTable[6] = "Microsoft.UI.Xaml.Controls.TitleBar";
            _typeNameTable[7] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[8] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[9] = "String";
            _typeNameTable[10] = "Microsoft.UI.Xaml.Controls.IconSource";
            _typeNameTable[11] = "Microsoft.UI.Xaml.Controls.TitleBarTemplateSettings";
            _typeNameTable[12] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[13] = "H.NotifyIcon.TaskbarIcon";
            _typeNameTable[14] = "Microsoft.UI.Xaml.FrameworkElement";
            _typeNameTable[15] = "H.NotifyIcon.ContextMenuMode";
            _typeNameTable[16] = "System.Enum";
            _typeNameTable[17] = "System.ValueType";
            _typeNameTable[18] = "System.Windows.Input.ICommand";
            _typeNameTable[19] = "Microsoft.UI.Xaml.Media.ImageSource";
            _typeNameTable[20] = "H.NotifyIcon.Core.TrayIcon";
            _typeNameTable[21] = "H.NotifyIcon.Core.PopupActivationMode";
            _typeNameTable[22] = "Microsoft.UI.Xaml.Controls.Primitives.Popup";
            _typeNameTable[23] = "Microsoft.UI.Xaml.Controls.Primitives.PlacementMode";
            _typeNameTable[24] = "Microsoft.UI.Xaml.Thickness";
            _typeNameTable[25] = "Guid";
            _typeNameTable[26] = "System.Drawing.Icon";
            _typeNameTable[27] = "System.MarshalByRefObject";
            _typeNameTable[28] = "Microsoft.UI.Xaml.Controls.ToolTip";
            _typeNameTable[29] = "Microsoft.UI.Xaml.Controls.ImageIconSource";
            _typeNameTable[30] = "Eleanor.MainWindow";
            _typeNameTable[31] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[32] = "CommunityToolkit.Mvvm.Input.IRelayCommand";
            _typeNameTable[33] = "Microsoft.UI.Xaml.Controls.TreeViewNode";
            _typeNameTable[34] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>";
            _typeNameTable[35] = "Int32";

            _typeTable = new global::System.Type[36];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::Microsoft.UI.Xaml.Media.DesktopAcrylicBackdrop);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Media.SystemBackdrop);
            _typeTable[6] = typeof(global::Microsoft.UI.Xaml.Controls.TitleBar);
            _typeTable[7] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[8] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[9] = typeof(global::System.String);
            _typeTable[10] = typeof(global::Microsoft.UI.Xaml.Controls.IconSource);
            _typeTable[11] = typeof(global::Microsoft.UI.Xaml.Controls.TitleBarTemplateSettings);
            _typeTable[12] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[13] = typeof(global::H.NotifyIcon.TaskbarIcon);
            _typeTable[14] = typeof(global::Microsoft.UI.Xaml.FrameworkElement);
            _typeTable[15] = typeof(global::H.NotifyIcon.ContextMenuMode);
            _typeTable[16] = typeof(global::System.Enum);
            _typeTable[17] = typeof(global::System.ValueType);
            _typeTable[18] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[19] = typeof(global::Microsoft.UI.Xaml.Media.ImageSource);
            _typeTable[20] = typeof(global::H.NotifyIcon.Core.TrayIcon);
            _typeTable[21] = typeof(global::H.NotifyIcon.Core.PopupActivationMode);
            _typeTable[22] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.Popup);
            _typeTable[23] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.PlacementMode);
            _typeTable[24] = typeof(global::Microsoft.UI.Xaml.Thickness);
            _typeTable[25] = typeof(global::System.Guid);
            _typeTable[26] = typeof(global::System.Drawing.Icon);
            _typeTable[27] = typeof(global::System.MarshalByRefObject);
            _typeTable[28] = typeof(global::Microsoft.UI.Xaml.Controls.ToolTip);
            _typeTable[29] = typeof(global::Microsoft.UI.Xaml.Controls.ImageIconSource);
            _typeTable[30] = typeof(global::Eleanor.MainWindow);
            _typeTable[31] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[32] = typeof(global::CommunityToolkit.Mvvm.Input.IRelayCommand);
            _typeTable[33] = typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode);
            _typeTable[34] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>);
            _typeTable[35] = typeof(global::System.Int32);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_DesktopAcrylicBackdrop() { return new global::Microsoft.UI.Xaml.Media.DesktopAcrylicBackdrop(); }
        private object Activate_6_TitleBar() { return new global::Microsoft.UI.Xaml.Controls.TitleBar(); }
        private object Activate_11_TitleBarTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.TitleBarTemplateSettings(); }
        private object Activate_13_TaskbarIcon() { return new global::H.NotifyIcon.TaskbarIcon(); }
        private object Activate_20_TrayIcon() { return new global::H.NotifyIcon.Core.TrayIcon(); }
        private object Activate_29_ImageIconSource() { return new global::Microsoft.UI.Xaml.Controls.ImageIconSource(); }
        private object Activate_33_TreeViewNode() { return new global::Microsoft.UI.Xaml.Controls.TreeViewNode(); }
        private void StaticInitializer_0_XamlControlsResources() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources).TypeHandle);
        private void StaticInitializer_4_DesktopAcrylicBackdrop() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Media.DesktopAcrylicBackdrop).TypeHandle);
        private void StaticInitializer_6_TitleBar() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.TitleBar).TypeHandle);
        private void StaticInitializer_11_TitleBarTemplateSettings() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.TitleBarTemplateSettings).TypeHandle);
        private void StaticInitializer_13_TaskbarIcon() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::H.NotifyIcon.TaskbarIcon).TypeHandle);
        private void StaticInitializer_15_ContextMenuMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::H.NotifyIcon.ContextMenuMode).TypeHandle);
        private void StaticInitializer_16_Enum() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Enum).TypeHandle);
        private void StaticInitializer_17_ValueType() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.ValueType).TypeHandle);
        private void StaticInitializer_18_ICommand() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Windows.Input.ICommand).TypeHandle);
        private void StaticInitializer_20_TrayIcon() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::H.NotifyIcon.Core.TrayIcon).TypeHandle);
        private void StaticInitializer_21_PopupActivationMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::H.NotifyIcon.Core.PopupActivationMode).TypeHandle);
        private void StaticInitializer_24_Thickness() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Thickness).TypeHandle);
        private void StaticInitializer_25_Guid() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Guid).TypeHandle);
        private void StaticInitializer_26_Icon() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Drawing.Icon).TypeHandle);
        private void StaticInitializer_27_MarshalByRefObject() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.MarshalByRefObject).TypeHandle);
        private void StaticInitializer_29_ImageIconSource() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ImageIconSource).TypeHandle);
        private void StaticInitializer_30_MainWindow() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Eleanor.MainWindow).TypeHandle);
        private void StaticInitializer_32_IRelayCommand() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.Mvvm.Input.IRelayCommand).TypeHandle);
        private void StaticInitializer_33_TreeViewNode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode).TypeHandle);
        private void StaticInitializer_34_IList() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>).TypeHandle);
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_34_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TreeViewNode>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.StaticInitializer = StaticInitializer_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Microsoft.UI.Xaml.Media.DesktopAcrylicBackdrop
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Media.SystemBackdrop"));
                userType.Activator = Activate_4_DesktopAcrylicBackdrop;
                userType.StaticInitializer = StaticInitializer_4_DesktopAcrylicBackdrop;
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Media.SystemBackdrop
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Microsoft.UI.Xaml.Controls.TitleBar
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_6_TitleBar;
                userType.StaticInitializer = StaticInitializer_6_TitleBar;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.TitleBar.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("Title");
                userType.AddMemberName("Subtitle");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("IsBackButtonEnabled");
                userType.AddMemberName("IsBackButtonVisible");
                userType.AddMemberName("IsPaneToggleButtonVisible");
                userType.AddMemberName("LeftHeader");
                userType.AddMemberName("RightHeader");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 7:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  String
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Microsoft.UI.Xaml.Controls.IconSource
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Microsoft.UI.Xaml.Controls.TitleBarTemplateSettings
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.StaticInitializer = StaticInitializer_11_TitleBarTemplateSettings;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  H.NotifyIcon.TaskbarIcon
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_13_TaskbarIcon;
                userType.StaticInitializer = StaticInitializer_13_TaskbarIcon;
                userType.AddMemberName("ContextMenuMode");
                userType.AddMemberName("LeftClickCommand");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("NoLeftClickDelay");
                userType.AddMemberName("TrayIcon");
                userType.AddMemberName("IsCreated");
                userType.AddMemberName("IsDisposed");
                userType.AddMemberName("SupportsCustomToolTips");
                userType.AddMemberName("DoubleClickCommand");
                userType.AddMemberName("DoubleClickCommandParameter");
                userType.AddMemberName("LeftClickCommandParameter");
                userType.AddMemberName("RightClickCommand");
                userType.AddMemberName("RightClickCommandParameter");
                userType.AddMemberName("MiddleClickCommand");
                userType.AddMemberName("MiddleClickCommandParameter");
                userType.AddMemberName("MenuActivation");
                userType.AddMemberName("PopupActivation");
                userType.AddMemberName("TrayPopup");
                userType.AddMemberName("TrayPopupResolved");
                userType.AddMemberName("PopupPlacement");
                userType.AddMemberName("PopupOffset");
                userType.AddMemberName("Id");
                userType.AddMemberName("CustomName");
                userType.AddMemberName("Icon");
                userType.AddMemberName("ToolTipText");
                userType.AddMemberName("TrayToolTip");
                userType.AddMemberName("TrayToolTipResolved");
                userType.AddMemberName("ParentTaskbarIcon");
                xamlType = userType;
                break;

            case 14:   //  Microsoft.UI.Xaml.FrameworkElement
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  H.NotifyIcon.ContextMenuMode
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_15_ContextMenuMode;
                userType.AddEnumValue("PopupMenu", global::H.NotifyIcon.ContextMenuMode.PopupMenu);
                userType.AddEnumValue("SecondWindow", global::H.NotifyIcon.ContextMenuMode.SecondWindow);
                userType.AddEnumValue("ActiveWindow", global::H.NotifyIcon.ContextMenuMode.ActiveWindow);
                xamlType = userType;
                break;

            case 16:   //  System.Enum
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_16_Enum;
                xamlType = userType;
                break;

            case 17:   //  System.ValueType
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_17_ValueType;
                xamlType = userType;
                break;

            case 18:   //  System.Windows.Input.ICommand
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_18_ICommand;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  Microsoft.UI.Xaml.Media.ImageSource
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  H.NotifyIcon.Core.TrayIcon
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_20_TrayIcon;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  H.NotifyIcon.Core.PopupActivationMode
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_21_PopupActivationMode;
                userType.AddEnumValue("LeftClick", global::H.NotifyIcon.Core.PopupActivationMode.LeftClick);
                userType.AddEnumValue("RightClick", global::H.NotifyIcon.Core.PopupActivationMode.RightClick);
                userType.AddEnumValue("DoubleClick", global::H.NotifyIcon.Core.PopupActivationMode.DoubleClick);
                userType.AddEnumValue("LeftOrRightClick", global::H.NotifyIcon.Core.PopupActivationMode.LeftOrRightClick);
                userType.AddEnumValue("LeftOrDoubleClick", global::H.NotifyIcon.Core.PopupActivationMode.LeftOrDoubleClick);
                userType.AddEnumValue("MiddleClick", global::H.NotifyIcon.Core.PopupActivationMode.MiddleClick);
                userType.AddEnumValue("All", global::H.NotifyIcon.Core.PopupActivationMode.All);
                userType.AddEnumValue("None", global::H.NotifyIcon.Core.PopupActivationMode.None);
                xamlType = userType;
                break;

            case 22:   //  Microsoft.UI.Xaml.Controls.Primitives.Popup
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Microsoft.UI.Xaml.Controls.Primitives.PlacementMode
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Microsoft.UI.Xaml.Thickness
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_24_Thickness;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  Guid
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_25_Guid;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  System.Drawing.Icon
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MarshalByRefObject"));
                userType.StaticInitializer = StaticInitializer_26_Icon;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  System.MarshalByRefObject
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_27_MarshalByRefObject;
                xamlType = userType;
                break;

            case 28:   //  Microsoft.UI.Xaml.Controls.ToolTip
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Microsoft.UI.Xaml.Controls.ImageIconSource
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.IconSource"));
                userType.Activator = Activate_29_ImageIconSource;
                userType.StaticInitializer = StaticInitializer_29_ImageIconSource;
                userType.AddMemberName("ImageSource");
                xamlType = userType;
                break;

            case 30:   //  Eleanor.MainWindow
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.StaticInitializer = StaticInitializer_30_MainWindow;
                userType.AddMemberName("ShowHideWindowCommand");
                userType.AddMemberName("ExitApplicationCommand");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  CommunityToolkit.Mvvm.Input.IRelayCommand
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_32_IRelayCommand;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  Microsoft.UI.Xaml.Controls.TreeViewNode
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_33_TreeViewNode;
                userType.StaticInitializer = StaticInitializer_33_TreeViewNode;
                userType.AddMemberName("Children");
                userType.AddMemberName("Content");
                userType.AddMemberName("Depth");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Parent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 34:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
                userType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_34_IList;
                userType.CollectionAdd = VectorAdd_34_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  Int32
                xamlType = new global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_TitleBar_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            return that.Content;
        }
        private void set_1_TitleBar_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            that.Content = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_2_TitleBar_Title(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            return that.Title;
        }
        private void set_2_TitleBar_Title(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_3_TitleBar_Subtitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            return that.Subtitle;
        }
        private void set_3_TitleBar_Subtitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            that.Subtitle = (global::System.String)Value;
        }
        private object get_4_TitleBar_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            return that.IconSource;
        }
        private void set_4_TitleBar_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_5_TitleBar_IsBackButtonEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            return that.IsBackButtonEnabled;
        }
        private void set_5_TitleBar_IsBackButtonEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            that.IsBackButtonEnabled = (global::System.Boolean)Value;
        }
        private object get_6_TitleBar_IsBackButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            return that.IsBackButtonVisible;
        }
        private void set_6_TitleBar_IsBackButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            that.IsBackButtonVisible = (global::System.Boolean)Value;
        }
        private object get_7_TitleBar_IsPaneToggleButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            return that.IsPaneToggleButtonVisible;
        }
        private void set_7_TitleBar_IsPaneToggleButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            that.IsPaneToggleButtonVisible = (global::System.Boolean)Value;
        }
        private object get_8_TitleBar_LeftHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            return that.LeftHeader;
        }
        private void set_8_TitleBar_LeftHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            that.LeftHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_9_TitleBar_RightHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            return that.RightHeader;
        }
        private void set_9_TitleBar_RightHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            that.RightHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_10_TitleBar_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TitleBar)instance;
            return that.TemplateSettings;
        }
        private object get_11_TaskbarIcon_ContextMenuMode(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.ContextMenuMode;
        }
        private void set_11_TaskbarIcon_ContextMenuMode(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.ContextMenuMode = (global::H.NotifyIcon.ContextMenuMode)Value;
        }
        private object get_12_TaskbarIcon_LeftClickCommand(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.LeftClickCommand;
        }
        private void set_12_TaskbarIcon_LeftClickCommand(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.LeftClickCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_13_TaskbarIcon_IconSource(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.IconSource;
        }
        private void set_13_TaskbarIcon_IconSource(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_14_TaskbarIcon_NoLeftClickDelay(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.NoLeftClickDelay;
        }
        private void set_14_TaskbarIcon_NoLeftClickDelay(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.NoLeftClickDelay = (global::System.Boolean)Value;
        }
        private object get_15_TaskbarIcon_TrayIcon(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.TrayIcon;
        }
        private object get_16_TaskbarIcon_IsCreated(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.IsCreated;
        }
        private object get_17_TaskbarIcon_IsDisposed(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.IsDisposed;
        }
        private object get_18_TaskbarIcon_SupportsCustomToolTips(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.SupportsCustomToolTips;
        }
        private object get_19_TaskbarIcon_DoubleClickCommand(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.DoubleClickCommand;
        }
        private void set_19_TaskbarIcon_DoubleClickCommand(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.DoubleClickCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_20_TaskbarIcon_DoubleClickCommandParameter(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.DoubleClickCommandParameter;
        }
        private void set_20_TaskbarIcon_DoubleClickCommandParameter(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.DoubleClickCommandParameter = (global::System.Object)Value;
        }
        private object get_21_TaskbarIcon_LeftClickCommandParameter(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.LeftClickCommandParameter;
        }
        private void set_21_TaskbarIcon_LeftClickCommandParameter(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.LeftClickCommandParameter = (global::System.Object)Value;
        }
        private object get_22_TaskbarIcon_RightClickCommand(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.RightClickCommand;
        }
        private void set_22_TaskbarIcon_RightClickCommand(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.RightClickCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_23_TaskbarIcon_RightClickCommandParameter(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.RightClickCommandParameter;
        }
        private void set_23_TaskbarIcon_RightClickCommandParameter(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.RightClickCommandParameter = (global::System.Object)Value;
        }
        private object get_24_TaskbarIcon_MiddleClickCommand(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.MiddleClickCommand;
        }
        private void set_24_TaskbarIcon_MiddleClickCommand(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.MiddleClickCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_25_TaskbarIcon_MiddleClickCommandParameter(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.MiddleClickCommandParameter;
        }
        private void set_25_TaskbarIcon_MiddleClickCommandParameter(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.MiddleClickCommandParameter = (global::System.Object)Value;
        }
        private object get_26_TaskbarIcon_MenuActivation(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.MenuActivation;
        }
        private void set_26_TaskbarIcon_MenuActivation(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.MenuActivation = (global::H.NotifyIcon.Core.PopupActivationMode)Value;
        }
        private object get_27_TaskbarIcon_PopupActivation(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.PopupActivation;
        }
        private void set_27_TaskbarIcon_PopupActivation(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.PopupActivation = (global::H.NotifyIcon.Core.PopupActivationMode)Value;
        }
        private object get_28_TaskbarIcon_TrayPopup(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.TrayPopup;
        }
        private void set_28_TaskbarIcon_TrayPopup(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.TrayPopup = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_29_TaskbarIcon_TrayPopupResolved(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.TrayPopupResolved;
        }
        private object get_30_TaskbarIcon_PopupPlacement(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.PopupPlacement;
        }
        private void set_30_TaskbarIcon_PopupPlacement(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.PopupPlacement = (global::Microsoft.UI.Xaml.Controls.Primitives.PlacementMode)Value;
        }
        private object get_31_TaskbarIcon_PopupOffset(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.PopupOffset;
        }
        private void set_31_TaskbarIcon_PopupOffset(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.PopupOffset = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_32_TaskbarIcon_Id(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.Id;
        }
        private void set_32_TaskbarIcon_Id(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.Id = (global::System.Guid)Value;
        }
        private object get_33_TaskbarIcon_CustomName(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.CustomName;
        }
        private void set_33_TaskbarIcon_CustomName(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.CustomName = (global::System.String)Value;
        }
        private object get_34_TaskbarIcon_Icon(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.Icon;
        }
        private void set_34_TaskbarIcon_Icon(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.Icon = (global::System.Drawing.Icon)Value;
        }
        private object get_35_TaskbarIcon_ToolTipText(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.ToolTipText;
        }
        private void set_35_TaskbarIcon_ToolTipText(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.ToolTipText = (global::System.String)Value;
        }
        private object get_36_TaskbarIcon_TrayToolTip(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.TrayToolTip;
        }
        private void set_36_TaskbarIcon_TrayToolTip(object instance, object Value)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            that.TrayToolTip = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_37_TaskbarIcon_TrayToolTipResolved(object instance)
        {
            var that = (global::H.NotifyIcon.TaskbarIcon)instance;
            return that.TrayToolTipResolved;
        }
        private object get_38_TaskbarIcon_ParentTaskbarIcon(object instance)
        {
            return global::H.NotifyIcon.TaskbarIcon.GetParentTaskbarIcon((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_38_TaskbarIcon_ParentTaskbarIcon(object instance, object Value)
        {
            global::H.NotifyIcon.TaskbarIcon.SetParentTaskbarIcon((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::H.NotifyIcon.TaskbarIcon)Value);
        }
        private object get_39_ImageIconSource_ImageSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ImageIconSource)instance;
            return that.ImageSource;
        }
        private void set_39_ImageIconSource_ImageSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ImageIconSource)instance;
            that.ImageSource = (global::Microsoft.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_40_MainWindow_ShowHideWindowCommand(object instance)
        {
            var that = (global::Eleanor.MainWindow)instance;
            return that.ShowHideWindowCommand;
        }
        private object get_41_MainWindow_ExitApplicationCommand(object instance)
        {
            var that = (global::Eleanor.MainWindow)instance;
            return that.ExitApplicationCommand;
        }
        private object get_42_TreeViewNode_Children(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Children;
        }
        private object get_43_TreeViewNode_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Content;
        }
        private void set_43_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_44_TreeViewNode_Depth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Depth;
        }
        private object get_45_TreeViewNode_HasChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasChildren;
        }
        private object get_46_TreeViewNode_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_46_TreeViewNode_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_47_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_47_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_48_TreeViewNode_Parent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Parent;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Eleanor.Eleanor_XamlTypeInfo.XamlMember xamlMember = null;
            global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "Microsoft.UI.Xaml.Controls.TitleBar.Content":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TitleBar");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "Content", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_TitleBar_Content;
                xamlMember.Setter = set_1_TitleBar_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TitleBar.Title":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TitleBar");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_TitleBar_Title;
                xamlMember.Setter = set_2_TitleBar_Title;
                break;
            case "Microsoft.UI.Xaml.Controls.TitleBar.Subtitle":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TitleBar");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "Subtitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_TitleBar_Subtitle;
                xamlMember.Setter = set_3_TitleBar_Subtitle;
                break;
            case "Microsoft.UI.Xaml.Controls.TitleBar.IconSource":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TitleBar");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_TitleBar_IconSource;
                xamlMember.Setter = set_4_TitleBar_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.TitleBar.IsBackButtonEnabled":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TitleBar");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "IsBackButtonEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_TitleBar_IsBackButtonEnabled;
                xamlMember.Setter = set_5_TitleBar_IsBackButtonEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.TitleBar.IsBackButtonVisible":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TitleBar");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "IsBackButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_TitleBar_IsBackButtonVisible;
                xamlMember.Setter = set_6_TitleBar_IsBackButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.TitleBar.IsPaneToggleButtonVisible":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TitleBar");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "IsPaneToggleButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_TitleBar_IsPaneToggleButtonVisible;
                xamlMember.Setter = set_7_TitleBar_IsPaneToggleButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.TitleBar.LeftHeader":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TitleBar");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "LeftHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_TitleBar_LeftHeader;
                xamlMember.Setter = set_8_TitleBar_LeftHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.TitleBar.RightHeader":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TitleBar");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "RightHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_TitleBar_RightHeader;
                xamlMember.Setter = set_9_TitleBar_RightHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.TitleBar.TemplateSettings":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TitleBar");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.TitleBarTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_TitleBar_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "H.NotifyIcon.TaskbarIcon.ContextMenuMode":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "ContextMenuMode", "H.NotifyIcon.ContextMenuMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_TaskbarIcon_ContextMenuMode;
                xamlMember.Setter = set_11_TaskbarIcon_ContextMenuMode;
                break;
            case "H.NotifyIcon.TaskbarIcon.LeftClickCommand":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "LeftClickCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_TaskbarIcon_LeftClickCommand;
                xamlMember.Setter = set_12_TaskbarIcon_LeftClickCommand;
                break;
            case "H.NotifyIcon.TaskbarIcon.IconSource":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_TaskbarIcon_IconSource;
                xamlMember.Setter = set_13_TaskbarIcon_IconSource;
                break;
            case "H.NotifyIcon.TaskbarIcon.NoLeftClickDelay":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "NoLeftClickDelay", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_TaskbarIcon_NoLeftClickDelay;
                xamlMember.Setter = set_14_TaskbarIcon_NoLeftClickDelay;
                break;
            case "H.NotifyIcon.TaskbarIcon.TrayIcon":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "TrayIcon", "H.NotifyIcon.Core.TrayIcon");
                xamlMember.Getter = get_15_TaskbarIcon_TrayIcon;
                xamlMember.SetIsReadOnly();
                break;
            case "H.NotifyIcon.TaskbarIcon.IsCreated":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "IsCreated", "Boolean");
                xamlMember.Getter = get_16_TaskbarIcon_IsCreated;
                xamlMember.SetIsReadOnly();
                break;
            case "H.NotifyIcon.TaskbarIcon.IsDisposed":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "IsDisposed", "Boolean");
                xamlMember.Getter = get_17_TaskbarIcon_IsDisposed;
                xamlMember.SetIsReadOnly();
                break;
            case "H.NotifyIcon.TaskbarIcon.SupportsCustomToolTips":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "SupportsCustomToolTips", "Boolean");
                xamlMember.Getter = get_18_TaskbarIcon_SupportsCustomToolTips;
                xamlMember.SetIsReadOnly();
                break;
            case "H.NotifyIcon.TaskbarIcon.DoubleClickCommand":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "DoubleClickCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_TaskbarIcon_DoubleClickCommand;
                xamlMember.Setter = set_19_TaskbarIcon_DoubleClickCommand;
                break;
            case "H.NotifyIcon.TaskbarIcon.DoubleClickCommandParameter":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "DoubleClickCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_TaskbarIcon_DoubleClickCommandParameter;
                xamlMember.Setter = set_20_TaskbarIcon_DoubleClickCommandParameter;
                break;
            case "H.NotifyIcon.TaskbarIcon.LeftClickCommandParameter":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "LeftClickCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_TaskbarIcon_LeftClickCommandParameter;
                xamlMember.Setter = set_21_TaskbarIcon_LeftClickCommandParameter;
                break;
            case "H.NotifyIcon.TaskbarIcon.RightClickCommand":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "RightClickCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_TaskbarIcon_RightClickCommand;
                xamlMember.Setter = set_22_TaskbarIcon_RightClickCommand;
                break;
            case "H.NotifyIcon.TaskbarIcon.RightClickCommandParameter":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "RightClickCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_TaskbarIcon_RightClickCommandParameter;
                xamlMember.Setter = set_23_TaskbarIcon_RightClickCommandParameter;
                break;
            case "H.NotifyIcon.TaskbarIcon.MiddleClickCommand":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "MiddleClickCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_TaskbarIcon_MiddleClickCommand;
                xamlMember.Setter = set_24_TaskbarIcon_MiddleClickCommand;
                break;
            case "H.NotifyIcon.TaskbarIcon.MiddleClickCommandParameter":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "MiddleClickCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_TaskbarIcon_MiddleClickCommandParameter;
                xamlMember.Setter = set_25_TaskbarIcon_MiddleClickCommandParameter;
                break;
            case "H.NotifyIcon.TaskbarIcon.MenuActivation":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "MenuActivation", "H.NotifyIcon.Core.PopupActivationMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_TaskbarIcon_MenuActivation;
                xamlMember.Setter = set_26_TaskbarIcon_MenuActivation;
                break;
            case "H.NotifyIcon.TaskbarIcon.PopupActivation":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "PopupActivation", "H.NotifyIcon.Core.PopupActivationMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_TaskbarIcon_PopupActivation;
                xamlMember.Setter = set_27_TaskbarIcon_PopupActivation;
                break;
            case "H.NotifyIcon.TaskbarIcon.TrayPopup":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "TrayPopup", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_TaskbarIcon_TrayPopup;
                xamlMember.Setter = set_28_TaskbarIcon_TrayPopup;
                break;
            case "H.NotifyIcon.TaskbarIcon.TrayPopupResolved":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "TrayPopupResolved", "Microsoft.UI.Xaml.Controls.Primitives.Popup");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_TaskbarIcon_TrayPopupResolved;
                xamlMember.SetIsReadOnly();
                break;
            case "H.NotifyIcon.TaskbarIcon.PopupPlacement":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "PopupPlacement", "Microsoft.UI.Xaml.Controls.Primitives.PlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_TaskbarIcon_PopupPlacement;
                xamlMember.Setter = set_30_TaskbarIcon_PopupPlacement;
                break;
            case "H.NotifyIcon.TaskbarIcon.PopupOffset":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "PopupOffset", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_TaskbarIcon_PopupOffset;
                xamlMember.Setter = set_31_TaskbarIcon_PopupOffset;
                break;
            case "H.NotifyIcon.TaskbarIcon.Id":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "Id", "Guid");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_TaskbarIcon_Id;
                xamlMember.Setter = set_32_TaskbarIcon_Id;
                break;
            case "H.NotifyIcon.TaskbarIcon.CustomName":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "CustomName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_TaskbarIcon_CustomName;
                xamlMember.Setter = set_33_TaskbarIcon_CustomName;
                break;
            case "H.NotifyIcon.TaskbarIcon.Icon":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "Icon", "System.Drawing.Icon");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_TaskbarIcon_Icon;
                xamlMember.Setter = set_34_TaskbarIcon_Icon;
                break;
            case "H.NotifyIcon.TaskbarIcon.ToolTipText":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "ToolTipText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_TaskbarIcon_ToolTipText;
                xamlMember.Setter = set_35_TaskbarIcon_ToolTipText;
                break;
            case "H.NotifyIcon.TaskbarIcon.TrayToolTip":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "TrayToolTip", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_TaskbarIcon_TrayToolTip;
                xamlMember.Setter = set_36_TaskbarIcon_TrayToolTip;
                break;
            case "H.NotifyIcon.TaskbarIcon.TrayToolTipResolved":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "TrayToolTipResolved", "Microsoft.UI.Xaml.Controls.ToolTip");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_TaskbarIcon_TrayToolTipResolved;
                xamlMember.SetIsReadOnly();
                break;
            case "H.NotifyIcon.TaskbarIcon.ParentTaskbarIcon":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("H.NotifyIcon.TaskbarIcon");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "ParentTaskbarIcon", "H.NotifyIcon.TaskbarIcon");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_38_TaskbarIcon_ParentTaskbarIcon;
                xamlMember.Setter = set_38_TaskbarIcon_ParentTaskbarIcon;
                break;
            case "Microsoft.UI.Xaml.Controls.ImageIconSource.ImageSource":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ImageIconSource");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "ImageSource", "Microsoft.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_ImageIconSource_ImageSource;
                xamlMember.Setter = set_39_ImageIconSource_ImageSource;
                break;
            case "Eleanor.MainWindow.ShowHideWindowCommand":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Eleanor.MainWindow");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "ShowHideWindowCommand", "CommunityToolkit.Mvvm.Input.IRelayCommand");
                xamlMember.Getter = get_40_MainWindow_ShowHideWindowCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Eleanor.MainWindow.ExitApplicationCommand":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Eleanor.MainWindow");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "ExitApplicationCommand", "CommunityToolkit.Mvvm.Input.IRelayCommand");
                xamlMember.Getter = get_41_MainWindow_ExitApplicationCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Children":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>");
                xamlMember.Getter = get_42_TreeViewNode_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Content":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_TreeViewNode_Content;
                xamlMember.Setter = set_43_TreeViewNode_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Depth":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_TreeViewNode_Depth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_TreeViewNode_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.Getter = get_46_TreeViewNode_HasUnrealizedChildren;
                xamlMember.Setter = set_46_TreeViewNode_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_47_TreeViewNode_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Parent":
                userType = (global::Eleanor.Eleanor_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Eleanor.Eleanor_XamlTypeInfo.XamlMember(this, "Parent", "Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember.Getter = get_48_TreeViewNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, 
            global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void StaticInitializer();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlUserType : global::Eleanor.Eleanor_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::Eleanor.Eleanor_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Eleanor.Eleanor_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, 
            global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            StaticInitializer();
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return global::System.Convert.ChangeType(value, global::System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public StaticInitializer StaticInitializer { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::Eleanor.Eleanor_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Eleanor.Eleanor_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

